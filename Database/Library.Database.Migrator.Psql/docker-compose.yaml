version: "3.8"

networks:
  psql-library-network:

services:
  etcd1: &etcd
    build:
      context: ../../../patroni
      dockerfile: Dockerfile
    networks: [ psql-library-network ]
    environment:
      ETCD_LISTEN_PEER_URLS: http://0.0.0.0:2380
      ETCD_LISTEN_CLIENT_URLS: http://0.0.0.0:2379
      ETCD_INITIAL_CLUSTER: etcd1=http://etcd1:2380,etcd2=http://etcd2:2380,etcd3=http://etcd3:2380
      ETCD_INITIAL_CLUSTER_STATE: new
      ETCD_INITIAL_CLUSTER_TOKEN: token
    container_name: etcd1
    hostname: etcd1
    command: etcd --name etcd1 --initial-advertise-peer-urls http://etcd1:2380
  
  etcd2:
    <<: *etcd
    container_name: etcd2
    hostname: etcd2
    command: etcd --name etcd2 --initial-advertise-peer-urls http://etcd2:2380
  
  etcd3:
    <<: *etcd
    container_name: etcd3
    hostname: etcd3
    command: etcd --name etcd3 --initial-advertise-peer-urls http://etcd3:2380
  
  haproxy:
    build:
      context: ../../../patroni
      dockerfile: Dockerfile
    image: patroni
    networks: [ psql-library-network ]
    env_file: patroni.env
    hostname: haproxy
    container_name: haproxy
    ports:
      - "5000:5000"
      - "5001:5001"
    command: haproxy
    environment: &haproxy_env
      ETCDCTL_ENDPOINTS: http://etcd1:2379,http://etcd2:2379,http://etcd3:2379
      PATRONI_ETCD3_HOSTS: "'etcd1:2379','etcd2:2379','etcd3:2379'"
      PATRONI_SCOPE: demo
  
  patroni1:
    build:
      context: ../../../patroni
      dockerfile: Dockerfile
    image: patroni
    networks: [ psql-library-network ]
    env_file: patroni.env
    hostname: patroni1
    container_name: patroni1
    environment:
      <<: *haproxy_env
      PATRONI_NAME: patroni1
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 10s
      timeout: 5s
      retries: 5
  
  patroni2:
    build:
      context: ../../../patroni
      dockerfile: Dockerfile
    networks: [ psql-library-network ]
    env_file: patroni.env
    hostname: patroni2
    container_name: patroni2
    environment:
      <<: *haproxy_env
      PATRONI_NAME: patroni2
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 10s
      timeout: 5s
      retries: 5 
  
  patroni3:
    build:
      context: ../../../patroni
      dockerfile: Dockerfile
    networks: [ psql-library-network ]
    env_file: patroni.env
    hostname: patroni3
    container_name: patroni3
    environment:
      <<: *haproxy_env
      PATRONI_NAME: patroni3
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 10s
      timeout: 5s
      retries: 5
  
  migrator:
    build:
      context: ../../.
      dockerfile: Dockerfile-Migrator-Psql
    container_name: migrator-psql
    networks: [ psql-library-network ]
    depends_on:
      patroni1:
        condition: service_healthy
      patroni2:
        condition: service_healthy
      patroni3:
        condition: service_healthy